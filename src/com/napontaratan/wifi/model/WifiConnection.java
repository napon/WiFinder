package com.napontaratan.wifi.model;

import java.io.Serializable;
import java.sql.Date;

import android.net.wifi.ScanResult;

import com.google.android.gms.maps.model.LatLng;

/**
 * A simple structure generated by clients when Wi-Fi connections
 * are detected.
 * 
 * <p>
 * <b>Note:</b> This type is different from <code>WifiMarker</code>,
 * which is used for data generated by the server and sent to clients
 * for plotting markers where connections are available.
 * <b>DO NOT DELETE EITHER MODULE.</b>
 * </p>
 * 
 * @see WifiMarker
 * 
 * @author Kurt Ahn
 */
public class WifiConnection implements Serializable {
	/**
	 * Creates and returns a WifiConnection object if the connection
	 * is insecure (open).
	 * 
	 * @param scan
	 * @param location
	 * @param time
	 * @param userId
	 * @return A valid WifiConnection object if the connection is 
	 * insecure and <code>null</code> otherwise.
	 */
	public static WifiConnection createWifiConnection(
			ScanResult scan, LatLng location, Date time, String userId) {
		if (isOpen(scan))
			return new WifiConnection(scan.SSID, scan.level,
					location, time, userId);
		else
			return null;
	}
	
	/**
	 * Determines whether the scanned connection <code>scan</code> 
	 * is open. <code>scan</code> is deemed open if its 
	 * <code>capabilities</code> include any of the recognized 
	 * wifi protection schemes.
	 * 
	 * @param scan 
	 * @return <code>true</code> if <code>scan</code> is open,
	 * <code>false</code> otherswise.
	 */
	private static boolean isOpen(ScanResult scan) {
		String[] modes = {"PSK", "WEP", "EAP"};
		for (String mode : modes)
			if (scan.capabilities.contains(mode))
				return false;
		return true;
	}
	
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	
	/**
     * Unique ID of the connection.
     */
	public final String ssid;
	
	/** 
	 * Detected signal strength.
	 */
	public final int signalStrength;
	
	/**
	 * Location of discovery.
	 */
	public final LatLng location;
	
	/**
	 * Time of discovery.
	 */
	public final transient Date timeDiscovered;
	
	/**
	 * Unique ID given to the application's user.
	 */
	public final String userId;
	
	/**
	 * Construct a WifiConnection.
	 *
	 * @param ssid .
	 * @param signalStrength
	 * @param location Location of discovery.
	 * @param time Time of discovery.
	 * @param userId Unique ID given to the application's user.
	 *
	 * @author Kurt Ahn
	 */
	private WifiConnection(
			String ssid, int signalStrength,
			LatLng location, Date time, String userId) {
		this.ssid = ssid;
		this.signalStrength = signalStrength;
		this.location = location;
		//this.time = scan.timestamp; // This requires min API level of 17
		this.timeDiscovered = time;
		this.userId = userId;
	}
	
	/**
	 * @return Information about the connection
	 * 
	 * @author Kurt Ahn
	 */
	@Override
	public String toString() {
		return
			"SSID: " + ssid + "\n" +
			"Signal Strength: " + String.valueOf(signalStrength) + "\n" +
			"Location: " + location.latitude + " "  + location.longitude + "\n" +
			"Time Discovered: " + timeDiscovered + "\n" + 
			"User ID: " + userId;
	}
}
